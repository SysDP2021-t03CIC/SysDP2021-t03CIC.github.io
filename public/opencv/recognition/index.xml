<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>追従対象の認識 on システム創成2021 CIC担当チーム 引継ぎ資料</title>
    <link>https://sysdp2021-t03cic.github.io/opencv/recognition/</link>
    <description>Recent content in 追従対象の認識 on システム創成2021 CIC担当チーム 引継ぎ資料</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright &amp;copy; 2021 a Hugo theme by [Gethugothemes](https://gethugothemes.com/)</copyright>
    <lastBuildDate>Mon, 20 Dec 2021 13:54:50 +0900</lastBuildDate><atom:link href="https://sysdp2021-t03cic.github.io/opencv/recognition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARマーカーの値の取得</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/recognition/estimatetarget/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/recognition/estimatetarget/</guid>
      <description>1. IDの取得 ids.rows() で検出できたIDの個数を取得。個数が0個より多いとき、各ARマーカーの座標・回転を取得
// IDの数が検出できたARマーカーの数 idsNum = ids.rows(); if (idsNum &amp;gt; 0) { // 各ARマーカーのIDを格納  idsArr = new int[idsNum]; ids.get(0, 0, idsArr); // ← ここで検出したARマーカーのIDを配列に  detected = true; EstiamtePoseMarkers(); } 2. 各ARマーカーの座標・回転を取得   検出した各ARマーカーの平行移動・回転ベクトルを計算   Aruco.estimatePoseSingleMarkers(/*各ARマーカーの角の画像座標*/, /*ARマーカー1辺の長さ(m)*/, /*内部行列*/, /*歪み係数*/, /*各ARマーカーの回転ベクトル(Out)*/, /*各ARマーカーの平行移動ベクトル(Out)*/) で平行移動・回転ベクトルを取得。
その後、rVecs,tVecsを計算しやすい配列にし、回転ベクトルをオイラー角に変換している。
また、追従対象の情報を計算しやすいように構造体を定義している。
public struct ARMarker { public int ID; public double[] tArr; public double[] rArr; public void Set_tArr(Mat tVec) { tArr = new double[3]; tVec.</description>
    </item>
    
    <item>
      <title>数式的な解説</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/recognition/description/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/recognition/description/</guid>
      <description>MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],processEscapes: true,processEnvironments: true,skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; },extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] }}});MathJax.Hub.Queue(function() {// Fix  tags after MathJax finishes running. This is a// hack to overcome a shortcoming of Markdown. Discussion at// https://github.com/mojombo/jekyll/issues/199var all = MathJax.Hub.getAllJax(), i;for(i = 0; i ARマーカーの持つ値 各ARマーカーから得られる値は以下の3つ
  座標の値:$[tx, ty, tz]$   回転の値:$[rx, ry, rz]$   ID :$id$</description>
    </item>
    
  </channel>
</rss>
