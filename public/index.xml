<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>システム創成2021 CIC担当チーム 引継ぎ資料</title>
    <link>https://sysdp2021-t03cic.github.io/</link>
    <description>Recent content on システム創成2021 CIC担当チーム 引継ぎ資料</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Copyright &amp;copy; 2021 a Hugo theme by [Gethugothemes](https://gethugothemes.com/)</copyright>
    <lastBuildDate>Fri, 25 Feb 2022 13:37:54 +0900</lastBuildDate><atom:link href="https://sysdp2021-t03cic.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bunshin Drone 3 システムの運用方法</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/system/operation/</link>
      <pubDate>Fri, 25 Feb 2022 13:37:54 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/system/operation/</guid>
      <description> 必要な人員  ユーザ1（VRヘッドセットを装着する人） ユーザ2（帽子を被り、ドローンに追従される人） システム運用者（PCを操作する）     Unityエディタを起動する。 ユーザ1はVRヘッドセットReverb G2を装着する  参照先   ユーザ2は帽子を被る PCとTelloを接続する  参照先   Telloをユーザ2の後方に置く システム運用者がUnityエディタ上で実行ボタンをクリックする ユーザ1が見ている映像にUIが表示される。右手のコントローラーをUIに当てて操作する  実は左手のコントローラーを対応させるのが間に合わなかった   Telloのカメラ映像が表示されなければ、最初からやり直す 正常動作していれば、Telloが離陸しユーザ2を探す Telloがユーザ2を視認し追従し始めたら、ユーザ2は歩行し始める システム運用終了時は、システム運用者がPCのキーボードの「L」キーを押す  Lは「land」（着陸）のL   システム運用者はUnityエディタ上で実行終了ボタンをクリックする。 速やかにTelloの電源をOFFにする。  </description>
    </item>
    
    <item>
      <title>Telloを使う時の手順</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/tello/setup/</link>
      <pubDate>Fri, 25 Feb 2022 13:16:26 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/tello/setup/</guid>
      <description> Telloを起動後速やかに離陸させるため、予めUnityなどは起動しておく。  Telloは電源がONになっている間、自動的に発熱してオーバーヒートする。 Telloが飛ぶときプロペラが発する風でTello自体を冷却する。   Telloの中を覗き、SSIDを確認する。 Telloにバッテリーを取り付け、電源ボタンを押す。 PCのWi-Fi設定を開き、TelloのSSIDを選択する。  Telloに接続している間、PCはインターネットに繋がらない。   Wi-Fi接続が完了したら、速やかにシステムを開始しTelloを離陸させる。  </description>
    </item>
    
    <item>
      <title>OpenCV for Unity</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/introduction/opencvforunity/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/introduction/opencvforunity/</guid>
      <description>2021年度の開発で最終的に利用したアセット
  ダウンロード   OpenCV for Unity
概要欄の「Trail &amp;amp; Demo」に試用版もある
2021年度の開発で利用したバージョンは2.4.5
  利用 アセットストアで購入(もしくは試用版) をダウンロードし、インポートする。
Pluginsは使っているPCに合わせる  メソッドの説明 正直引き継ぎでアプリ実行するだけなら、見る必要は無いが少しだけメソッドの説明をしておく。   Matクラスのインスタンス生成 new Mat(/*行数*/, /*列数*/, /*CvType.CV_[成分の型]C[チャンネル数]*/) ※成分の型:(例)double型 → 64F, short型 → 32S等
※チャンネル:行列の成分の表し方(行,列)にもう1つ要素が加わったもの(というイメージ)  Matに具体的な数値を格納する Mat.put(/*数値を入れ始める行の目*/, /*列の目*/, /*具体的な数値の格納された配列*/)   Matから具体的な数値を取り出す Mat.get(/*取り出す初める行の目*/, /*列の目*/, /*取り出した数値を格納する配列*/)   Mat同士の結合(横に並べる結合) Core.hconcat(/*結合するMatのList*/, /*結合結果を格納するMat*/)     その他のメソッドの内容もリファレンスで見ることができる。
  参考  OpenCV for Unity 入門 (1) - 事始め pythonでArUcoライブラリを使ってARマーカの位置とか角度とか知る pythonでARマーカーの姿勢推定 OpenCV for Unityのリファレンス    </description>
    </item>
    
    <item>
      <title>数式的な解説</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/recognition/description/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/recognition/description/</guid>
      <description>MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],processEscapes: true,processEnvironments: true,skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; },extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] }}});MathJax.Hub.Queue(function() {// Fix  tags after MathJax finishes running. This is a// hack to overcome a shortcoming of Markdown. Discussion at// https://github.com/mojombo/jekyll/issues/199var all = MathJax.Hub.getAllJax(), i;for(i = 0; i ARマーカーの持つ値 各ARマーカーから得られる値は以下の3つ
  座標の値:$[tx, ty, tz]$   回転の値:$[rx, ry, rz]$   ID :$id$</description>
    </item>
    
    <item>
      <title>OpenCVSharp</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/introduction/opencvsharp/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/introduction/opencvsharp/</guid>
      <description>2021年度の開発で断念したOpenCVライブラリの.NET用ラッパー  TextureをMatに変換する関数がない 変換関数を自作したが動作が遅かった これらの理由から利用を断念。OpenCV for Unityの方を利用した。  OpenCVSharpの導入 1. NuGetの導入  NuGetForUnityから「NuGEtForUnity.〇.〇.〇.unitypackage」をダウンロード 「NuGEtForUnity.〇.〇.〇.unitypackage」をUnityEditorのウィンドウにドラッグ&amp;amp;ドロップ 全てチェックを付けたままインポート  2. OpenCVSharpの導入  UnityEditorのヘッダーメニュー「NuGet」→「Manage Nuget Packages」を選択 「OpenCVSharp」を検索しインストール  OpenCVSharp3の場合は、OpenCVSharp3-AnyCPU OpenCVSharp4の場合は、OpenCVSharp4.WindowsやOpenCVSharp4+OpenCVSharp4.runtime.○○   opencvsharpからインストールしたバージョンに近いもののzipファイルをダウンロード ダウンロードしたファイルをにある「OpenCVSharpExtern.dll」を「Assets/Packages/OpenCvSharp○-○○/lib/netstandard2.0」にコピー  </description>
    </item>
    
    <item>
      <title>Reverb G2を使う時の準備</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/setup/</link>
      <pubDate>Tue, 22 Feb 2022 13:08:55 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/setup/</guid>
      <description> 配線  ヘッドセットにケーブルを繋ぐ  ヘッドセットのフェイスクッションを外す ヘッドセットにケーブルを接続する。しっかり奥まで差さないと反応しない ヘッドセットにフェイスクッションを取り付ける   電源ケーブルを繋ぐ DisplayPortケーブルをPCに接続する  マザーボードではなくグラフィックボードの端子に繋ぐ   USB Type-CケーブルにType-A変換アダプタを取り付ける Type-A変換アダプタをUSB3.0端子に取り付ける  必ずUSB3.0の端子に差すこと。2.0では動作しない     ケーブルの抜き差し  エラーメッセージが出た場合は、PCに刺さっているケーブルを他の端子に差し替える エラーが無くなり正常動作するまで試す   Mixed Reality ポータルの設定  Mixed Realityポータル アプリにて「部屋の境界線のセットアップ」を選択する PC画面上の指示に従って設定する   前回と同じ部屋で使用するならこの設定は必要無い   装着  ヘッドバンドを緩めに調整する ヘッドバンドを上に上げる ゴーグル部分を顔に当てる ヘッドバンドを下げる ヘッドバンドを締める スピーカーの位置を調整する    </description>
    </item>
    
    <item>
      <title>1.主となる制御のコード</title>
      <link>https://sysdp2021-t03cic.github.io/tello/tellolib/controller/</link>
      <pubDate>Tue, 22 Feb 2022 06:50:26 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/tellolib/controller/</guid>
      <description>注意事項 スクリプト内にTelloControllerの名前のファイルが二つ存在する場合、使われているファイルは「TelloController1122.cs」であることに気を付ける。
ファイル内の大まかな説明 ドローンの移動の制御は「TelloController1122.cs」のUpdate内のswitch内で行われる。ドローンが自動で移動するサイクルは「Stop」,「TakeOff」,「TakingOff」,「Detect」,「Follow」,「Land」,「Landing」に分かれる。
  「Stop」   Telloが受けているコマンドの状態の初期化。
Sキーが入力されると、「TakeOff」に移行する。
  「TakeOff」   Telloが離陸する段階。
takeoffのコマンドを送ったのち、「TakingOff」に移行する。
  「TakingOff」   Telloが離陸して上昇、旋回してARマーカーを探す段階。
離陸自体は瞬時に終了するが、ARマーカーを探すために高度を合わせる。
（waitTimerが3以上4以下の時）今回は追従対象が決まっていたため固定値分上昇させた。
（waitTimerが4以上の時）ARマーカーを認識するまで旋回を続ける。認識に成功したとき、 「Follow」に移行する。
  「Detect」   「Follow」に移行する役割。今回は未使用。
  「Follow」   Telloが追従していることを示す段階。この段階が続いている限りTelloは追従を続ける。
Lキーが入力されると、「Land」に移行する。
  「Land」   Telloが着陸する段階。
landのコマンドを送ったのち、「Landing」に移行する。
  「Landing」   Telloが着陸している段階。
実質的にシステム終了の段階である。</description>
    </item>
    
    <item>
      <title>1.基本性能</title>
      <link>https://sysdp2021-t03cic.github.io/tello/tello/performance/</link>
      <pubDate>Tue, 22 Feb 2022 06:50:26 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/tello/performance/</guid>
      <description>Telloについて dji社の販売しているトイドローン。
バッテリー駆動のドローンでバッテリーの続く限り飛行する。
- 搭載機能   機体  重量（プロペラガード含）： 87g 最大速度： 28.8km/h 最大飛行時間： 13分（無風、定速15km/h） 動作環境温度： 0 ~ 40 ℃ 動作周波数帯： 2.4 ~ 2.4835GHz トランスミッター（EIRP）： 20dBm（FCC）, 19dBm（CE,SRRC,MIC）    カメラ  最大静止画面サイズ： 2592 × 1936 動画記録モード： HD 1280 × 720 30p 動画フォーマット： MP4    フライトバッテリー  容量： 1,100mAh 電圧： 3.8V バッテリータイプ： LiPo 電力量： 4.18Wh 正味重量： 25 ± 2g 充電温度範囲： 5 ~ 45 ℃ 最大充電電力： 10W    Telloユーザーマニュアル より引用</description>
    </item>
    
    <item>
      <title>2.Telloの改造</title>
      <link>https://sysdp2021-t03cic.github.io/tello/tello/remodeling/</link>
      <pubDate>Tue, 22 Feb 2022 06:50:26 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/tello/remodeling/</guid>
      <description>注意 改造については公式から出されたものではないため扱いには気を付ける。
実際に触る部分はカバーのところがメインであるため壊すことはないと思うが、怖いものは怖いため気を付けておく。
改造箇所 前述のとおり、改造の主な部分は天板の白い部分である。
目的としてはTello内の風通しを良くして、飛行することでTello自体の熱を冷ますことである。この作業によってTelloのオーバーヒートの発生が少なくなり長時間の飛行が可能になった。
改造箇所は3か所ある。
  天板
側面を覆う様になっている斜めの箇所を爪の部分を避けて切り取る。天板を外す際は、バッテリーの挿入口側から隙間を少しずつ開けていき、天板全体が少し浮いたら少し力を込めることで外すことができる。
天板を付け直す際は、爪をあわせて軽い力で上から押さえつける。すると「カチッ」という音が鳴るのでそれで終了。
  底面の棒
Telloの裏側を見ると6本の棒が縦格子状についている。
その棒を根元からすべて切り離す。
  バッテリーの下にある板
バッテリーを挿入する箇所の底に薄い板状のものが存在する。
両面テープでくっついているため、なにか薄い物で持ち上げた後に引っこ抜くことでとれる。板が取れたら両端の突起を切断する。
元に戻す際には向きに気を付けて戻す。
  </description>
    </item>
    
    <item>
      <title>TelloSDKについて</title>
      <link>https://sysdp2021-t03cic.github.io/tello/tellosdk/tellosdk/</link>
      <pubDate>Fri, 18 Feb 2022 16:44:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/tellosdk/tellosdk/</guid>
      <description>TelloSDK 基本的に以下のサイトを見ればわかる。
 ニート翔ぶ～C#でドローンを飛ばす～
 主なTelloコマンド  command
SDKモードに入る（1番最初に命令するコマンド） takeoff
Telloが離陸する land
Telloが着陸する emergency
全てのモーターが止まる（緊急着陸） streamon
ビデオストリームをON streamoff
ビデオストリームをOFF up x
x cm上昇 down x
x cm下降 left x
x cm左へ right x
x cm右へ forward x
x cm前進 back x
x cm後退 cw x
x 度時計回りに旋回 ccw x
x 度反時計回りに旋回  注意事項  15秒間Telloになにも命令が送られないと、自動で着陸する。 途中で命令が聞かなくなった場合はバッテリー切れを待つか、他のPCからWi-fiをつなぎ直して命令を送ることで命令が送れる時がある。  </description>
    </item>
    
    <item>
      <title>2.移動距離に関する制御のコード</title>
      <link>https://sysdp2021-t03cic.github.io/tello/tellolib/move_cal/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/tellolib/move_cal/</guid>
      <description>ファイル内の大まかな説明 </description>
    </item>
    
    <item>
      <title>ARマーカーの作成</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/ar_marker/createarmarker/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/ar_marker/createarmarker/</guid>
      <description>ARマーカーの作成方法(C#, Unity)  新しいUnityプロジェクトを作成 OpenCVforUnityをインポート ARマーカー作成用のスクリプトを作成 以下のようにコードを変更 //ここから using OpenCVForUnity.CoreModule; using OpenCVForUnity.ArucoModule; using OpenCVForUnity.ImgcodecsModule; //ここまでが追加する名前空間 using UnityEngine; public class CreateARmarker : MonoBehaviour { Dictionary ARdict; Mat ARmat; bool isCreated; // Start is called before the first frame update  void Start() { ARdict = Aruco.getPredefinedDictionary(Aruco.DICT_4X4_50); ARmat = new Mat(); // nの値が作成するARマーカーの枚数  // iの値が作成するARマーカーのID  int n = 4, i; for (i = 0; i &amp;lt; n; i++) { // ARマーカーの画像情報をARmatに格納  Aruco.</description>
    </item>
    
    <item>
      <title>ARマーカーの検出</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/ar_marker/detectarmarker/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/ar_marker/detectarmarker/</guid>
      <description>カメラ映像を取り込む OpenCV for UnityでARマーカーの検出を行う際、画像をMatクラスにする必要がある。
基のシステムでTelloのカメラ映像をオブジェクトのTextureに変換して表示していたため、
Texture →(TextureSender)→ Texture2D →(OpenCV for Unity)→ Mat
 という手順で変換している。
 画像をARマーカーの検出に送る用スクリプトを作成 以下のようにコードを変更  このスクリプトでは、オブジェクトのTextureをTexture2Dに変換し、さらにARマーカー検出するEstimateメソッドを呼び出している。
using System.Collections; using System.Collections.Generic; using UnityEngine; //独自の名前空間 using EstimateTargetTransform_OCVfU; public class TextureSender : MonoBehaviour { // CameraParaCal cameraPara;  public EstimateTra estimater; Texture2D texture; Texture2D result; RenderTexture rt; Rect source; // Start is called before the first frame update  void Start() { // cameraPara = new CameraParaCal();  estimater = new EstimateTra(); } public Texture2D ToTexture2D(Texture self) { var sw = self.</description>
    </item>
    
    <item>
      <title>カメラの特徴に関する前置き</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/parameter/description/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/parameter/description/</guid>
      <description>MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\\[&#39;,&#39;\\]&#39;]],processEscapes: true,processEnvironments: true,skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; },extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] }}});MathJax.Hub.Queue(function() {// Fix  tags after MathJax finishes running. This is a// hack to overcome a shortcoming of Markdown. Discussion at// https://github.com/mojombo/jekyll/issues/199var all = MathJax.Hub.getAllJax(), i;for(i = 0; i カメラで撮影される映像(画像)は、カメラのレンズなどの種類によって様々な歪みが生じる。 この歪みを修正して、ARマーカーの正しい距離や角度を求めるために、カメラキャリブレーション(カメラ行列、歪み)を知っておく必要がある。
 カメラ行列</description>
    </item>
    
    <item>
      <title>カメラ行列の計測</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/parameter/calculation/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/parameter/calculation/</guid>
      <description>カメラ行列・歪み係数の計測の方法  以下の内容のスクリプトを作成。  using System; using System.Collections; using System.Collections.Generic; using OpenCVForUnity.Calib3dModule; using OpenCVForUnity.ImgprocModule; using OpenCVForUnity.CoreModule; using OpenCVForUnity.ArucoModule; using OpenCVForUnity.UnityUtils; using UnityEngine; namespace EstimateTargetTransform_OCVfU { public class CameraParaCal { private Mat img; private Mat gray; private Size crossNum; private List&amp;lt;Mat&amp;gt; objPoints; private List&amp;lt;Mat&amp;gt; imgPoints; private Mat pattern_points; public Mat cameraMatrix; public Mat distCoeffs; public double[] cameraArray; public double[] distArray; bool calculating; // Start is called before the first frame update  public CameraParaCal() { gray = new Mat(); objPoints = new List&amp;lt;Mat&amp;gt;(); imgPoints = new List&amp;lt;Mat&amp;gt;(); pattern_points = new Mat(); cameraMatrix = new Mat(); distCoeffs = new Mat(); calculating = true; int w, h; float pattern_size = 2.</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/edit/article/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/article/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/edit/github/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/github/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/edit/howtomake/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/howtomake/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/edit/setup/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/setup/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/pc/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/pc/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/system/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/system/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/tello/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/tello/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/tello/autotracking/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/autotracking/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/tello/video/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/video/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/unity/blender/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/blender/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事</title>
      <link>https://sysdp2021-t03cic.github.io/unity/unityproject/testarticle/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/unityproject/testarticle/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/edit/article/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/article/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/edit/github/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/github/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/edit/howtomake/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/howtomake/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/edit/setup/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/edit/setup/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/pc/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/pc/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/reverbg2/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/system/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/system/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/howtouse/tello/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/howtouse/tello/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/opencv/recognition/estimatetarget/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/opencv/recognition/estimatetarget/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/tello/autotracking/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/autotracking/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/tello/video/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/tello/video/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/unity/blender/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/blender/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/unity/steamvr/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/steamvr/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>テスト記事2</title>
      <link>https://sysdp2021-t03cic.github.io/unity/unityproject/testarticle2/</link>
      <pubDate>Sat, 25 Dec 2021 08:59:39 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/unityproject/testarticle2/</guid>
      <description>これはテストページです。</description>
    </item>
    
    <item>
      <title>Test_by_tsuchiya</title>
      <link>https://sysdp2021-t03cic.github.io/alpha/a/test_by_tsuchiya/</link>
      <pubDate>Tue, 21 Dec 2021 15:15:59 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/alpha/a/test_by_tsuchiya/</guid>
      <description>Hello World このファイルは1回目のテストです。 箇条書きの練習
 リアルタイム映像 プロジェクト 画像認識  ARマーカー   ドローン  </description>
    </item>
    
    <item>
      <title>Test_by_ban</title>
      <link>https://sysdp2021-t03cic.github.io/alpha/a/test_by_ban/</link>
      <pubDate>Tue, 21 Dec 2021 15:14:55 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/alpha/a/test_by_ban/</guid>
      <description>とりあえず使ってみた テストを兼ねて作成。実際にページを作成し、
使った機能  ドローン パソコン VR やる気 根気 努力 友情 勝利  丸罰ゲーム    ここに うって いく。     ○ 罰 ○    罰    ○ 罰     まとめ いかがでしたでしょうか？もしよければチャンネル登録、高評価、Twitterのフォローなどなどをお願いします。</description>
    </item>
    
    <item>
      <title>Test2</title>
      <link>https://sysdp2021-t03cic.github.io/alpha/a/test/</link>
      <pubDate>Mon, 20 Dec 2021 13:54:50 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/alpha/a/test/</guid>
      <description>first This is a test page&amp;hellip;</description>
    </item>
    
    <item>
      <title>Test2</title>
      <link>https://sysdp2021-t03cic.github.io/alpha/b/test/</link>
      <pubDate>Mon, 20 Dec 2021 13:54:50 +0900</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/alpha/b/test/</guid>
      <description>first This is a test page&amp;hellip;</description>
    </item>
    
    <item>
      <title>SteamVRの導入</title>
      <link>https://sysdp2021-t03cic.github.io/unity/steamvr/installation/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sysdp2021-t03cic.github.io/unity/steamvr/installation/</guid>
      <description>SteamVRの導入に関してです。
1.Steamをインストールする。
SteamVRを動かすにはSteamを入れる必要があるのでまずSteamをインストールします。 まずSteamのサイトに行きます。
Steamのサイト
こちらのサイトの上の方にSteamをインストールという文字があるのでここからインストールできます。
2.Steamの起動
インストールが終わったらSteamにログインをします。 ここは私の代(bunshin-drone3の代)が作ったアカウントがあるのでこれを使ってくれるもよし。新しく作ってもらってもよしです。 詳しいアカウントの詳細は企業さんに聞いてください。
3.SteamVRの起動
ログインしたらSteamの右上にVRというマークが表示されているかと思うのでそちらをクリックしてください。 もしも表示されていなかったらヘッドマウントディスプレイ(VR機器のことです)が接続されていないと思いますのでそちらを確認してみてください。
恐らく大丈夫だと思いますが、SteamVRがどうしても起動できないという場合はストアでSteamVRがライブラリに追加されているか確認してください。勝手に入っていたと思うのですが入っていなければこちらから手動でインストールをお願いします。
SteamVRが起動出来たら以下のような小さなウィンドウが開かれると思います。 なお、VR機器が繋がっている状態の時は、ヘッドマウントディスプレイを始め、コントローラーなどの機器がこのウィンドウに表示されます。 これでSteamVRの導入は終わりです。
こちらは実際に私が参考にしたURLです。もし見れなくなってしまっていたらごめんなさいね。大体の流れは今回書いた記事とほぼ同じです。
これはSteamVRをインストールするやりかたを書いてあるサイトです。 このサイトではUE4というゲームを作るときに使われるものでの利用ですがインストール自体はこれの通りで行いました。
参考サイト</description>
    </item>
    
  </channel>
</rss>
